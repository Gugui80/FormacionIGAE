DEFINICIÓN
Son proveedores de datos, que mantienen lógica de acceso a ellos y operativa relacionada con el negocio y las cosas que se hacen con los datos dentro de una aplicación. 
Los servicios serán consumidos por los componentes, que delegarán en ellos la responsabilidad de acceder a la información y la realización de operaciones con los datos, para mantener 
un código organizado y escalable.

ANGULAR CLI - ng generate service miService / ng g service miService -> -> Esto NO provoca que el servicio se agregue automáticamente a la definición del módulo.

@Injectable()
export class miService {

  constructor() { }

}

El decorador @injectable indica a Angular que la clase que se decora puede necesitar dependencias que puedan ser entregadas por inyección de dependencias.

INYECCIÓN DE SERVICIOS EN COMPONENTES
En Angular la inyección de dependencias se realiza por medio del constructor. En el constructor de un componente podemos declarar cualquiera de los servicios que vamos a usar 
y el framework se encargará de proporcionarlo, sin que tengamos que realizar nosotros ningún trabajo adicional.

constructor(public/private miService: MiService) { }

IMPORTANTE: Cuando TypeScript detecta el modificador de visibilidad "public" o "private" en el parámetro enviado al constructor, inmediatamente declara una propiedad en la clase 
y le asigna el valor recibido en el constructor. Por tanto, esta declaración:

export class ListadoUsuariosComponent {
  constructor(public usuarioService: UsuarioService) { }
}

Sería equivalente a:

export class ListadoUsuariosComponent {
    usuarioService: UsuarioService;
    constructor(public usuarioService: UsuarioService) {
        this.usuarioService = usuarioService;
    }
}

A partir de este momento, podemos utilizar toda la funcionalidad aportada por el servicio (atributos y métodos), tanto en nuestro modelo como en la vista del componente.

CONSEJOS DE ESTRUCTURACIÓN DE CÓDIGO EN SERVICIOS: VENTAJAS DE TS
Utlizar interfaces y clases para la implementación de los servicios y el tipado de los objetos a devolver por los mismos, para aprovechar las ayudas de TypeScript en tiempo de desarrollo.
A la hora de compilar la aplicación, para su ejecución en el navegador, también te ayudará TypeScript, especificando los errores que ha encontrado en el código, derivados por un uso 
incorrecto de las variables y sus tipos.
No será más pesado para el navegador, ni te alertará de problemas que se puedan producir, ya que éste solo ejecutará código Javascript. Sin embargo, lo cierto es que si se tipa 
correctamente todo lo que estuvo en tu mano y el compilador no te alertó de ningún error, difícilmente se producirá un error por un tipo mal usado en tiempo de ejecución.

CLASES VS INTERFACES - Depende de cómo se vayan a generar los datos:
Es muy habitual usar simplemente interfaces, desprovistas de inicialización y funcionalidad, ya que esas partes es común que sean delegadas en los servicios. Pero en el caso 
de usar clases, tus nuevos objetos serán creados con la palabra "new" y necesitarán una inicialización.