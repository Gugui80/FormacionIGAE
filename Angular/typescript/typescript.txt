DEFINICIÓN
Es un lenguaje de programación de alto nivel que implementa muchos de los mecanismos más habituales de la programación orientada a objetos, pudiendo extraer grandes beneficios 
que serán especialmente deseables en aplicaciones grandes, capaces de escalar correctamente durante todo su tiempo de mantenimiento. 
Su característica fundamental es que compila en Javascript nativo, por lo que se puede usar en todo proyecto donde se esté usando Javascript. El navegador, o cualquier otra plataforma 
donde se ejecuta Javascript, nunca llegará a enterarse que el código original estaba escrito en TypeScript, porque lo único que llegará a ejecutar es el Javascript resultante de la compilación.
Nace con el objetivo de aportar a Javascript las herramientas y ventajas en el desarrollo con las que están acostumbrados desarrolladores de lenguajes más potentes como C# o Java.

SUPERSET DE JS
TypeScript es un Superset de Javascript: Los superset compilan en el lenguaje estándar, por lo que el desarrollador programa en aquel lenguaje expandido, pero luego su código 
es "transpilado" (porque realmente no es una compilación a código máquina) para transformarlo en el lenguaje estándar, capaz de ser entendido en todas las plataformas.
TypeScript nos ofrece muchas de las utilidades que se necesitan en JavaScript para poder convertirlo en un lenguaje escalable, a la altura de las necesidades más exigentes. 

INSTALACIÓN -> npm install -g typescript

TSCONFIG.JSON => [ejercicio1]
Archivo de configuración principal de typescript. Principales propiedades:
target: indicamos que queremos que compile a código Javascript escrito con el estándar ES5, que es el que todos los navegadores comprenden, incluso los Internet Explorer más antiguos.
outDir: indicamos el directorio donde se van a colocar los archivos Javascript, ".js", una vez transpilados.

Para probar el transpilado de los archivos .ts a .js lanzamos el comando -> tsc -w (-w significa watcher, al hacer cambios en el código veremos como se recompila en tiempo real)
Comprobaremos que se ha creado un .js por cada archivo .ts, y que se ha creado la carpeta /dist que es donde se servirá la aplicación.

INTERFACES => [ejercicio2]
Mecanismo de la programación orientada a objetos que trata de suplir la carencia de herencia múltiple. En TypeScript una interfaz puede definir propiedades, mientras que en otros lenguajes las interfaces 
sólo definen métodos. Declaración:

interface todoableInterface {
    propp1: type;
    prop2: type;
    method1(): void;
    ....
}

Para poder implementarla:

class miClase implements todoableInterface {
    propp1 = val1;
    prop2 = val2;
    method1() {
        //Instrucciones del método
    }
}

La interfaz provoca que sea necesario declarar todas las propiedades e implementar todos los métodos a la hora de definir la clase. En resumen, es como un contrato.

GENÉRICOS => [ejercicio3]
Son una especie de "plantilla" de código, mediante la cual podemos aplicar un tipo de datos determinado a varios puntos de nuestro código. Sirven para aprovechar código, sin tener que duplicarlo 
por causa de cambios de tipo y evitando la necesidad de usar el tipo "any".
Se indican entre "menores y mayores que", asignando un alias al tipo variable que se esté recibiendo. Luego podemos usar ese alias para definir el tipo.

function miTipo<nuevoTipo>(val1: nuevoTipo): nuevoTipo {
    //Instrucciones de mi nuevo tipo
}
